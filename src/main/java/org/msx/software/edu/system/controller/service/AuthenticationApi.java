package org.msx.software.edu.system.controller.service;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.AllArgsConstructor;
import org.msx.software.edu.system.business.dto.PlainTextDto;
import org.msx.software.edu.system.business.operation.authentication.PodOAuthService;
import org.msx.software.edu.system.business.operation.authentication.UserManagementService;
import org.msx.software.edu.system.business.security.jwt.JwtResponse;
import org.msx.software.edu.system.controller.vm.RoleEntityVm;
import org.msx.software.edu.system.controller.vm.UserEntityVm;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/auth")
@CrossOrigin
@AllArgsConstructor
public class AuthenticationApi {

    private final PodOAuthService podOAuthService;
    private final UserManagementService userManagementService;

    @ApiOperation(value = "Get a new token using Pod code", notes = "?????? ?? ???? ???? ?? ??? ?? ??????? ?? ??? ?? ?? ??????? ?? ??? ????? ??? ?? ??? ?? ???")
    @GetMapping("/get-pod-user-token/{pod-code}")
    public JwtResponse getUserTokenByPodOAuth(@ApiParam(value = "??? ?? ???? ??????? ?? ???? ????? ??? ????? ?? ????", required = true) @PathVariable(name = "pod-code") String podCode) {
        UserEntityVm userEntityVm = podOAuthService.getUser(podCode);
        userManagementService.updateUser(userEntityVm);
        return userManagementService.login(userEntityVm);
    }

    @ApiOperation(value = "Get a new token using POD business token id", notes = "?????? ?? ???? ?????? ?? ??? ?? ??????? ?? ?? ??? ? ???? ???? ??? ? ????? ?? ?????? ??? ?? ?? ?? ???? ????? ?? ??? ??? ??? ?? ??? ??????? ????")
    @GetMapping("/get-access-token")
    public JwtResponse getUserTokenByPodBusinessToken(@ApiParam(value = "?? ??? ? ???? ???? ??? ? ????? ?? ?????? ??? ?? ?? ?? ???? ????? ?? ??? ??? ??? ?? ??? ??????? ????", required = true) @RequestParam(name = "token-id") String tokenId) {
        UserEntityVm userEntityVm = podOAuthService.getUserByBusinessToken(tokenId);
        userManagementService.updateUser(userEntityVm);
        return userManagementService.login(userEntityVm);
    }

    @ApiOperation(value = "Refresh token", notes = "?? ???? ?????? ????? ?? ?? ????? ?????? ???? ?? ??? ? ?? ???? ????? ???? ?? ???? ?????? ???? ????? ?? ???")
    @GetMapping("/refresh-token")
    public PlainTextDto refreshToken(@ApiParam(value = "???? ?????", required = true) @RequestParam(name = "token") String token) {
        return new PlainTextDto(userManagementService.refreshToken(token));
    }

    @ApiOperation(value = "Get all users", notes = "?????? ???? ????? ??????? ?????")
    @GetMapping("/get/users/all")
    @PreAuthorize("hasRole('ROLE_USER_MANAGE')")
    public List<UserEntityVm> getAllUsers() {
        return userManagementService.getAllUsers();
    }

    @ApiOperation(value = "Get all roles", notes = "?????? ???? ????? ?????? ??? ?????")
    @GetMapping("/get/roles/all")
    @PreAuthorize("hasRole('ROLE_USER_MANAGE')")
    public List<RoleEntityVm> getAllRoles() {
        return userManagementService.getAllRoles();
    }

    @ApiOperation(value = "Change user roles", notes = "????? ??? ??? ?? ?????. ???? ????? ????? ?? ??? ??? ????? ????? ???? ?? ???? ?? ??????? ?????? ???? ????? ?? ????")
    @PostMapping("/user/change-role")
    @PreAuthorize("hasRole('ROLE_USER_MANAGE')")
    public UserEntityVm changeUserRole(@ApiParam(value = "??????? ?????? ?? ??? ??? ?? ?? ????? ?? ??? ????? ????. ???? ??? ??? ???? ????? ?? ???? ????? ???? ??????", required = true) @RequestBody UserEntityVm userViewModel) {
        return userManagementService.changeUserRole(userViewModel);
    }

    @ApiOperation(value = "Get all user roles", notes = "?????? ???? ????? ??? ??? ?? ?????")
    @GetMapping("get/user-roles/{username}")
    public List<RoleEntityVm> getAllUserRoles(@ApiParam(value = "??? ?????? ???? ?? ??? ?????? ???? ??? ??? ?? ?? ?????", required = true) @PathVariable(name = "username") String username) {
        return userManagementService.getAllUserRoleList(username);
    }
}